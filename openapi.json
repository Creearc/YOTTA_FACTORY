{
  "openapi": "3.0.1",
  "info": {
    "title": "DTower API",
    "version": "v1",
    "description": "![wallpaper](./wallpaper.jpg)\n\n**Цель хакатона:** Построить самую высокую 3d башню кроссворд из русских слов.\n\nКоманды пишут код на своей стороне, производят вычисления, то есть строят башню и производят необходимые проверки, далее отправляют башню в json формате на игровой сервер. Сервер тратит 3 минуты на попытку построить каждую башню.\n\nКомандам дается:\n  1. [Словарь русских слов в формате json](https://datsteam.dev/dtower/secret/data.json)\n  2. Правила конструирования прочной башни, которая не развалится (описывается ниже)\n  3. API для отправки своей башни и обработка результатов (ниже на этой странице)\n  \n  \n# Рецепт победы\nВам необходимо решить 5 задач, от качества и скорости решения этих задач будет зависеть то, победите ли вы в хакатоне:\n  1. Продумать алгоритм строительства башни\n  2. Сделать на своей стороне проверку каждой башни\n  3. Сделать упаковку башни в json согласно указанным правилам\n  4. Сделать отправку башни на сервер\n  5. Сделать проверку статуса башни\n\nДалее можно будет сфокусироваться на непрерывном совершенствовании п.1 и\n  строительства всё более высокой башни. \n  \n  \n# Башня\n\nБашня строится в 3d пространстве из кубиков. Каждый кубик — это одна буква или символ, таким образом слова могут быть выстроены по осям x, y, z. По осям слова должны быть расположены в определенном направлении, по осям X и Y слева-направо (0 -> ∞), а для оси Z сверху-вниз (∞ -> 0). Считается, что буквы соединены между собой намертво, а вот от большой массы над ними других букв могут разрушиться. Также башня может завалиться на бок. Два слепленных слова в одном направлении скорее всего не пройдут проверку словаря, поскольку каждые две буквы вместе должны являться словом или частью слова. Ну и слова из словаря можно использовать только один раз.\n\n  \n  Сервер после получения вашей башни строит ее на протяжении 3 минут, в это время вы не сможете прислать новую башню. Более того, по итогу строительства башня может обрушиться или завалиться, то есть спустя 3 минуты вы сможете узнать результат валидации башни.\n\n\n  Ваша успешно построенная башня попадает в таблицу рекордов (ТОП) с указанной высотой башни. Если какая-либо из команд пришлет на сервер башню большей длинны, и эта башня тоже будет успешно построена, она займет первое место в ТОПе, а остальные сдвинуться на нижние места. В ТОП не добавляются башни, если их высота не превышает самую высокую на текущий момент. В 19:30 ТОП будет заморожен, и самая высокая башня к этому моменту принесет своей команде победу.\n  \n  \n  # Правила конструирования (валидации башни)\n  \n  \n  Сервер осуществляет ряд проверок башен на своей стороне, чтобы не ждать по 3 минуты результат проверки сервером вашей башни рекомендуется осуществлять аналогичные проверки на своей стороне. \n  \n  Башня будет успешно построена если:\n  1. Слова в башне будут только из словаря data.json\n  2. Каждое слово в башне использовано один раз\n  3. Слова расположены в нужном направлении\n  4. Все слова в башне соединены\n  5. Слова находятся в положительной зоне координат и нижнее слово начинается с уровня 0 по оси Z\n  6. Башня не заваливается\n  7. Башня не обрушается\n  \n  Давайте подробнее рассмотрим каждую проверку.\n  \n  \n  # Слова в башне будут только из словаря data.json\n  \n  \n  Словом считаются 2 и более соединенные буквы по одной из осей. Каждое слово должно быть взято из словаря [data.json](https://datsteam.dev/dtower/secret/data.json).\n  \n  \n  # Каждое слово в башне использовано один раз\n  \n  \n  Не важно по какой оси, любое слово, использованное в башне, не может повториться в другом месте той же башни. В каждой ячейке только одна буква или тире.\n  \n  \n  # Слова расположены в нужном направлении\n  \n  \n  По осям слова должны быть расположены в определенном направлении, по осям X и Y в направлении от 0 до ∞ (слева-направо), а для оси Z от ∞ до 0 (сверху-вниз).\n  \n  \n  # Все слова в башне соединены\n  \n  \n  Буквы или слова, висящие отдельно от башни, или башня, состоящая из нескольких несоединенных частей, не пройдет валидацию. Каждая буква должна быть соединена с какой-либо другой буквой или несколькими буквами. Соединение букв никак не обозначается в протоколе, имеется ввиду наличие букв в соседних координатах.\n  \n  \n  # Слова находятся в положительной зоне координат и нижнее слово начинается с уровня 0 по оси Z\n  \n  \n  Ни одна из букв башни не может иметь отрицательного значения по координате X, Y или Z. Более того, самое нижнее слово башни должно иметь букву со значением 0 по оси Z.\n  \n  \n  # Башня не заваливается\n  \n  \n  Завал башни происходит если центр масс оказывается вне контура основания башни.  \n  \n  \n  Каждая буква представляет собой куб, центр масс которого находится в центре. То есть размер куба 1х1х1, а центр масс этого куба будет 0,5x0,5x0,5.\n\n\n  Для вычисления центра масс всей башни необходимо будет вернуть по каждой из осей массу по каждой из оси вычислить:\n  - Zц = (Сумма произведений массы на координату Z)/(Масса башни)\n  - Xц = (Сумма произведений массы на координату Х)/(Масса башни)\n  - Yц = (Сумма произведений массы на координату Y)/(Масса башни). Если Z получилось меньше равно 0,5, то дальнейший расчет не производится.\n  \n  Центр масс Xц, Yц должен находиться внутри контура, описывающего основание башни\n  (буквы размещенные на нулевом уровне оси Z).\n  \n  \n  # Башня не обрушается\n  \n  \n  На каждом слое, количество букв, соединенных с верхним слоем, должно быть больше/равно, чем всё количество букв верхних слоёв, деленное на 50. То есть каждая буква, соединенная с верхним слоем способна удерживать вес 50 букв выше.\n  \n  \n  Таким образом ваша башня на каждом уровне должна иметь достаточное количество вертикальных “столбов”, способных удержать вес башни выше.\n  \n  \n  # API\n  \n  \n  Вы уже получили свой токен при регистрации, это означает, что в каждый свой запросы вы должны будете добавлять http заголовок ‘token’ с отправленным вам значением.\n  \n  \n  Сервер имеет всего 3 ендпоинта:\n  1. Отправка башни\n  2. Получение статуса башни\n  3. Получение таблицы лидеров\n"
  },
  "servers": [
    {
      "url": "https://dtower-api.datsteam.dev/"
    }
  ],
  "paths": {
    "/towers": {
      "post": {
        "summary": "Отправка башни",
        "description": "Команды могут отправлять новую башню раз в 3 минуты, если отправить раньше - будет получена ошибка. Если сделать больше 10 запросов по отправке проекта башни в период постройки команда отправляется в бан на 5 минут (при этом строительство башни продолжается).\n\nЕсли башня проходит валидацию, то через 3 минуты она идет в зачет построенной и может попасть в ТОП, если выше самой высокой башни.\n",
        "tags": [
          "towers"
        ],
        "operationId": "addTask",
        "parameters": [
          {
            "name": "token",
            "description": "Токен команды, полученный при регистрации",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TowerInput"
              },
              "example": {
                "towerId": "vsScHLtp6MYXOIzfFtZAb3RQWKWoUpmz",
                "letters": [
                  {
                    "name": "К",
                    "x": 0,
                    "y": 0,
                    "z": 0
                  },
                  {
                    "name": "О",
                    "x": 1,
                    "y": 0,
                    "z": 0
                  },
                  {
                    "name": "Т",
                    "x": 2,
                    "y": 0,
                    "z": 0
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/towers/{id}": {
      "get": {
        "summary": "Получение статуса башни",
        "description": "Строительство башни — это длительный процесс, поэтому команды отдельным запросом проверяют статус башни. Запрос содержит параметр id, соответствующий идентификатору башни towerId из ендпоинта создания башни.\n",
        "tags": [
          "towers"
        ],
        "operationId": "getTower",
        "parameters": [
          {
            "name": "token",
            "description": "Токен команды, полученный при регистрации",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "description": "Идентификатор башни, отправленный вместе с самой башней на проверку. Уникальный в рамках одной команды",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TowerStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/towers/top": {
      "get": {
        "summary": "Получение таблицы лидеров",
        "description": "Башни попадают в рейтинг только если они прошли все проверки и прошло 3 минуты с момента отправки башни на проверку. \n\n`towers` - список из 100 самых высоких башен, отсортированный по высоте(первая - самая высокая). Если в топе несколько башен с одной высотой, то выше в списке будет стоять башня, отправленная раньше.\n\n`leaderboard` - список лидеров. В этот список попадают башни, которые являлись самыми высокими на момент постройки. Т.е. если команда отправит башню высотой 100, то в этот список больше не попадет другая башня высотой 100 или меньше. Но если далее будет построена башня высотой 101 и выше, она попадет в этот список на первое место.\n\n`teams` список команд, попавших в рейтинг, отсортированный по их наилучшему результату(первая башня в списке башен соответствует первой команде в списке команд)\n",
        "tags": [
          "towers"
        ],
        "operationId": "getTop",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TopRating"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorDto": {
        "type": "object",
        "description": "Список ошибок, возникших при проверке башни",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Letter": {
        "type": "object",
        "properties": {
          "x": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "y": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "z": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Русская буква (в кодировке UTF-8). Регистр не имеет значения, сервер автоматически приведет к нужному регистру."
          }
        }
      },
      "TowerInput": {
        "required": [
          "letters",
          "towerId"
        ],
        "type": "object",
        "properties": {
          "towerId": {
            "description": "Уникальный (в рамках команды) идентификатор башни. Далее он может быть использован для получения статуса башни командой",
            "type": "string"
          },
          "letters": {
            "maxItems": 550000,
            "minItems": 0,
            "type": "array",
            "description": "Список кирпичей для постройки башни",
            "items": {
              "$ref": "#/components/schemas/Letter"
            }
          }
        }
      },
      "TowerStatusResponse": {
        "type": "object",
        "description": "Статус проверки отправленной башни",
        "properties": {
          "status": {
            "description": "Непосредственно текущий статус башни:\n  * `BUILDING` - Башня строится, через какое-то время будет понятно получилось ли ее построить\n  * `BUILT` - Башня построена\n  * `FELL` - Башня не прошла какие-то из проверок и упала\n",
            "type": "string",
            "enum": [
              "BUILDING",
              "BUILT",
              "FELL"
            ]
          },
          "errors": {
            "description": "Ошибки, выявленные при строительстве",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "wordsCount": {
            "description": "Количество слов, найденных при строительстве. Содержит полный список слов, в т.ч. тех, которые не были найдены в словаре(подробная информация о таких словах будет в поле errors)",
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "description": "Высота башни",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RatingTeamRow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "sentTowers": {
            "type": "integer",
            "format": "int64"
          },
          "builtTowers": {
            "type": "integer",
            "format": "int64"
          },
          "topHeight": {
            "type": "integer",
            "format": "int32"
          },
          "topWords": {
            "type": "integer",
            "format": "int32"
          },
          "topLetters": {
            "type": "integer",
            "format": "int32"
          },
          "topHeightTower": {
            "$ref": "#/components/schemas/RatingTowerRow"
          },
          "topWordsTower": {
            "$ref": "#/components/schemas/RatingTowerRow"
          },
          "topLettersTower": {
            "$ref": "#/components/schemas/RatingTowerRow"
          }
        }
      },
      "RatingTowerRow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "type": "integer",
            "format": "int64"
          },
          "teamName": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "wordsCount": {
            "type": "integer",
            "format": "int32"
          },
          "lettersCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TopRating": {
        "type": "object",
        "properties": {
          "leaderboard": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatingTowerRow"
            }
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatingTeamRow"
            }
          },
          "towers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatingTowerRow"
            }
          }
        }
      }
    }
  }
}